{"version":3,"sources":["components/SearchBox/SearchBox.js","utils.js","components/Star/Star.js","components/Book/Book.js","components/BooksList/BooksList.js","config.js","components/TopBooks/TopBooks.js","components/SearchPage/SearchPage.js","components/FavoritesPage/FavoritesPage.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","useSearchParams","setSearchParams","useState","inputText","setInputText","onSubmit","event","preventDefault","q","className","value","onChange","target","type","olWorksApiCall","olid","customParams","queryParams","URLSearchParams","jscmd","toString","queryUrl","fetch","redirect","then","result","json","olAuthorsApiCall","keyToOlid","key","keySplit","split","length","Star","onFavoriteChange","selected","setSelected","useEffect","rawFavorites","localStorage","getItem","JSON","parse","includes","checkIsFavorite","href","onClick","newValue","newIsFavorite","favorites","setItem","stringify","filter","favOlid","updateIsFavorite","isFavorite","Book","book","compact","truncateDescIfNeeded","text","substr","descriptionContent","coverEl","authorNamesEl","title","authorNames","description","covers","src","alt","entries","map","i","authorName","BooksList","books","handlekey","TopBooks","setBooks","curSlideNum","setCurSlideNum","animIntervalRef","useRef","current","a","newBooks","config","worksResult","authors","author","authorResult","push","name","setInterval","clearInterval","SearchPage","searchParams","isLoading","setIsLoading","urlQuery","get","trim","params","olSearchApiCall","limit","results","docs","searchResult","author_name","FavoritesPage","favoriteOlids","App","to","activeClassName","path","element","replace","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63bb9945.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport './SearchBox.css';\n\n// Note: despite the name, we use this component for the\n// front page as well as search (the front page is effectively\n// the same as the search page with nothing entered).\nfunction SearchBox() {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const [inputText, setInputText] = useState('');\n\n  function handleInputChange(event) {\n    setInputText(event.target.value);\n  }\n\n  function handleSearchFormSubmit(event) {\n    event.preventDefault();\n\n    setSearchParams({ q: inputText });\n  }\n\n  return (\n    <form onSubmit={handleSearchFormSubmit}>\n      <input className=\"SearchBox-search-input\" value={inputText} onChange={handleInputChange} />{' '}\n      <button className=\"SearchBox-search-button\" type=\"submit\">Search</button>\n    </form >\n  );\n}\n\nexport default SearchBox;","// Function for accessing Open Library's \"search\" API (designed to provide\n// an API equivalent to their in-site search feature)\nfunction olSearchApiCall(params) {\n  const queryUrl = \"https://openlibrary.org/search.json?\" +\n    new URLSearchParams(params).toString();\n  return fetch(queryUrl)\n    .then(result => result.json());\n}\n\n// Function for looking up books in the the Open Library\n// \"Works\" API. Docs here: https://openlibrary.org/dev/docs/api/works\n//\n// This gives more details than the Search API, but has less functionality\n// for searching, so we look up stuff with the Search API and then\n// make an additional call to this API to find more details.\nfunction olWorksApiCall(olid, customParams = {}) {\n  const queryParams = new URLSearchParams({\n    jscmd: 'details',\n    ...customParams\n  }).toString();\n\n  const queryUrl = 'https://openlibrary.org/works/' + olid + '.json?' + queryParams;\n  return fetch(queryUrl, { redirect: 'follow' })\n    .then(result => result.json());\n}\n\n// Function for looking up books in the the Open Library\n// \"Authors\" API. Docs here: https://openlibrary.org/dev/docs/api/authors\n//\n// This gives more details than the Search API, but has less functionality\n// for searching, so we look up stuff with the Search API and then\n// make an additional call to this API to find more details.\nfunction olAuthorsApiCall(olid, customParams = {}) {\n  const queryParams = new URLSearchParams({\n    jscmd: 'details',\n    ...customParams\n  }).toString();\n\n  const queryUrl = 'https://openlibrary.org/authors/' + olid + '.json?' + queryParams;\n  return fetch(queryUrl)\n    .then(result => result.json());\n}\n\n// Converts an Open Library \"key\" string to a bare OLID.\n//\n// Several Open Library endpoints return the OLID for entries in the\n// format of a \"key\" which contains the whole path prefix that you\n// would need to look up the item by hand, e.g. \"/works/OL24690782W/\".\n//\n// However, some API lookups want the actual OLID as a parameter. Also,\n// we use the OLID as the reference for the book when storing the list\n// of favorites in local storage. This simply chops off\n// the path prefix and gets everything after the final slash (e.g., \n// /works/OL24690782W/ becomes OL24690782W).\nfunction keyToOlid(key) {\n  const keySplit = key.split('/');\n  return keySplit[keySplit.length - 1];\n}\n\n// Check if given OLID is present in the array of favorites in local storage.\n// If the list of favorites hasn't even been initialized in local storage yet,\n// still returns false.\nfunction checkIsFavorite(olid) {\n  const rawFavorites = localStorage.getItem('favorites');\n\n  if (rawFavorites === null) {\n    return false;\n  }\n\n  const favorites = JSON.parse(rawFavorites);\n  return favorites.includes(olid);\n}\n\n// If \"isFavorite\" arg is true, adds given OLID to list of\n// favorites in storage (if it's not already there).\n// If \"isFavorite\" arg is false, remove item from list\n// of favorites in storage (if it's there)\nfunction updateIsFavorite(olid, newIsFavorite) {\n  const rawFavorites = localStorage.getItem('favorites');\n\n  if (rawFavorites === null) {\n    // The array of favorites hasn't even been initialized yet--\n    // initialize with an empty array if we're removing a favorite,\n    // or an array containing only this OLID if we're adding a favorite.\n    localStorage.setItem('favorites', JSON.stringify(newIsFavorite ? [olid] : []));\n    return;\n  }\n\n  const favorites = JSON.parse(rawFavorites);\n\n  if (newIsFavorite) {\n    // Add favorite to array in local storage, if needed.\n    if (!favorites.includes(olid)) {\n      localStorage.setItem('favorites', JSON.stringify([...favorites, olid]))\n    }\n  } else {\n    // Remove any instances of OLID from array in local storage\n    localStorage.setItem('favorites', JSON.stringify(favorites.filter(\n      favOlid => favOlid !== olid\n    )));\n  }\n}\n\n// Get OLIDs for all favorites from local storage\nfunction retrieveFavorites() {\n  if (localStorage.getItem('favorites') === null) {\n    return [];\n  }\n\n  return JSON.parse(localStorage.getItem('favorites'));\n}\n\nexport { olSearchApiCall, olWorksApiCall, olAuthorsApiCall, keyToOlid, checkIsFavorite, updateIsFavorite, retrieveFavorites };","import React, { useState, useEffect } from \"react\";\nimport { checkIsFavorite, updateIsFavorite } from \"utils\";\n\nimport './Star.css';\n\n\nfunction Star({ olid, onFavoriteChange }) {\n  const [selected, setSelected] = useState(null);\n\n  // Initialize the \"selected\" status to the current\n  // status from local storage about whether the item\n  // is favorited.\n  useEffect(() => {\n    setSelected(checkIsFavorite(olid));\n  }, [olid]);\n\n  function handleLinkClick(event) {\n    event.preventDefault();\n\n    // Flip \"favorited\" to the opposite of the current value\n    // update both React state and value in local storage.\n    // Also, if the outside component has provided a callback\n    // to call when the value is updated, call it to report\n    // the new change.\n\n    const newValue = !selected;\n    updateIsFavorite(olid, newValue);\n    setSelected(!selected);\n\n    if (typeof onFavoriteChange !== 'undefined') {\n      onFavoriteChange({\n        olid: olid,\n        isFavorite: newValue\n      });\n    }\n  }\n\n  return (\n    selected === null\n      ? null\n      : (\n        <div>\n          <a href=\"#\" className={\"Star-star\" + (selected ? \" favorited\" : \"\")} onClick={handleLinkClick}>{'\\u2605'}</a>\n        </div>\n      )\n  );\n}\n\nexport default Star;","import Star from 'components/Star/Star';\n\nimport './Book.css';\n\n// Takes a book JSON object in the format\nfunction Book({ book, compact = false, onFavoriteChange }) {\n  function truncateDescIfNeeded(text) {\n    if (!compact || text.length <= 500) {\n      return text;\n    } else {\n      return text.substr(0, 300) + '...';\n    }\n  }\n\n  const { title, authorNames, olid, description, covers } = book;\n\n  // Description sometimes comes as an object with keys \"type\" and\n  // \"value\" (type is content type), and sometimes as a pure string.\n  // The key can also be totally absent (this gets passed down to here\n  // as undefined)\n  let descriptionContent;\n  if (typeof description === 'undefined') {\n    descriptionContent = <em>No description</em>;\n  } else if (typeof description === 'object' && description !== null) {\n    descriptionContent = truncateDescIfNeeded(description.value);\n  } else {\n    descriptionContent = truncateDescIfNeeded(description);\n  }\n\n  // The APIs return a list of cover art (probably just all the cover\n  // art for all the different editions of the book). It can be absent,\n  // in which case it ends up getting passed here as undefined. Possibly\n  // it can also be empty. In the undefined or empty case, display a\n  // placeholder div.\n  let coverEl;\n  if (typeof covers === 'undefined' || covers.length === 0) {\n    coverEl = <div className=\"Book-cover-placeholder\">Cover art missing</div>\n  } else {\n    coverEl = <img className=\"Book-cover\" src={'https://covers.openlibrary.org/b/id/' + covers[0] + '-M.jpg'} alt={\"Cover for \" + title} />;\n  }\n\n  let authorNamesEl;\n  if (typeof authorNames === 'undefined') {\n    authorNamesEl = <div>No author information</div>\n  } else {\n    authorNamesEl = (\n      <div>\n        by{' '}\n        {[...authorNames.entries()].map(([i, authorName]) => {\n          return (\n            <>\n              {i > 0 && i == authorNames.length - 1 ? ' and ' : null}\n              {i > 0 && i !== authorNames.length - 1 ? ', ' : null}\n              <span className=\"Book-author\">{authorName}</span>\n            </>\n          );\n        })}\n      </div>\n    );\n  }\n\n  return (\n    <article className={'Book-container' + (compact ? ' compact' : '')}>\n      <div className=\"Book-header-and-star\">\n        <h3><a className=\"Book-title\" href={\"https://openlibrary.org/works/\" + olid}>{title}</a></h3>\n        <Star olid={olid} onFavoriteChange={onFavoriteChange} />\n      </div>\n      {authorNamesEl}\n      <div className=\"book-cover-container\">\n        {coverEl}\n      </div>\n      <div className=\"Book-description\">{descriptionContent}</div>\n    </article>\n  );\n}\n\nexport default Book;","import Book from \"components/Book/Book\";\n\n// Reusable component for displaying lists of books.\n// Used on Search and Favorites pages.\nfunction BooksList({ books, onFavoriteChange }) {\n  return (\n    <div>\n      {books.map((book) => (\n        <Book onFavoriteChange={onFavoriteChange} handlekey={book.olid} book={book} />\n      ))}\n    </div >\n  )\n}\n\nexport default BooksList;","export default {\n  topBookOlids: [\n    'OL8483260W', // Diary of a Wimpy Kid\n    'OL257263W', // The Art of Computer Programming vol 2\n    'OL17930368W', // Atomic Habits\n    'OL16995607W', // The Music Instinct\n    'OL4620995W', // A Walk in the Woods\n  ],\n  topShowsTimePerSlide: 5000 // in ms\n};","import { useState, useEffect, useRef } from 'react';\n\nimport { olWorksApiCall, olAuthorsApiCall, keyToOlid, retrieveFavorites } from 'utils';\n\nimport Book from 'components/Book/Book';\n\nimport 'components/TopBooks/TopBooks.css';\n\nimport config from 'config';\n\n// Note: despite the name, we use this component for the\n// front page as well as search (the front page is effectively\n// the same as the search page search page with nothing entered).\nfunction TopBooks() {\n  const [books, setBooks] = useState(null);\n  const [curSlideNum, setCurSlideNum] = useState(0);\n\n  const animIntervalRef = useRef(null);\n\n  const booksRef = useRef(null);\n\n  booksRef.current = books;\n\n  useEffect(async () => {\n    let newBooks = [];\n    for (let olid of config.topBookOlids) {\n      const worksResult = await olWorksApiCall(olid);\n\n      // Look up authors for this book and add their names\n      // to the list of authors.\n      let authorNames = [];\n\n      for (let author of worksResult.authors) {\n        let authorResult = await olAuthorsApiCall(keyToOlid(author.author.key));\n        authorNames.push(authorResult.name);\n      }\n\n      newBooks.push({\n        authorNames: authorNames,\n        description: worksResult.description,\n        title: worksResult.title,\n        covers: worksResult.covers,\n        olid: olid\n      });\n    }\n\n    setBooks(newBooks);\n\n    // Start the interval to run the animation.\n    // The page will start by displaying slide 0 on its own\n    // and then this interval is responsible for updating it\n    // from there. \n    animIntervalRef.current = setInterval(() => {\n      setCurSlideNum((curSlideNum) => {\n        // Wrap around to item 0 if we're about to go past the end.\n        return curSlideNum < config.topBookOlids.length - 1 ? curSlideNum + 1 : 0;\n      });\n    }, config.topShowsTimePerSlide);\n\n\n\n    return () => {\n      // Animation interval cleanup logic.\n      //\n      // We also check to confirm that the animation doesn't exist yet.\n      // That should only happen if this page was unmounted before the\n      // animation started (which is definitely something that will\n      // come up occasionally, because the load isn't instant).\n\n      if (animIntervalRef.current !== null) {\n        clearInterval(animIntervalRef.current);\n      }\n    }\n  }, []);\n\n\n  return (\n    <div className=\"TopBooks-container\">\n      <h2>Top books</h2>\n      {books === null\n        ? null\n        : (\n          <Book compact book={books[curSlideNum]} />\n        )}\n    </div>\n  );\n}\n\nexport default TopBooks;","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport SearchBox from 'components/SearchBox/SearchBox';\nimport BooksList from 'components/BooksList/BooksList';\nimport TopBooks from 'components/TopBooks/TopBooks';\n\nimport './SearchPage.css';\n\nimport { olSearchApiCall, olBooksApiCall, keyToOlid, olWorksApiCall } from 'utils';\n\n// Note: despite the name, we use this component for the\n// front page as well as search (the front page is effectively\n// the same as the search page search page with nothing entered).\nfunction SearchPage() {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const [books, setBooks] = useState([]);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const urlQuery = searchParams.get('q');\n\n  useEffect(() => {\n    // Ignore search submission if search box is blank or there's no query\n    // at all (the \"no query at all\" scenario happens when the user is\n    // on the front page and hasn't searched anything yet).\n    if (urlQuery == null || urlQuery.trim() === '') {\n      return;\n    }\n\n    setIsLoading(true);\n\n    olSearchApiCall({\n      q: urlQuery,\n      limit: 8,\n    }).then(async (results) => {\n\n      // \"new\" meaning this will be the new (total) set of books to show, not that we are adding some to an existing list.\n      let newBooks = [];\n      for (let searchResult of results.docs) {\n        let olid = keyToOlid(searchResult.key);\n\n        // Perform another API call to our other Open Library\n        // API (the Works API) to get the complete info, including\n        // description and cover thumbnail.\n        let worksResult;\n\n        // ignore results where the \"works\" API call fails --\n        // can happen due to connection errors, etc.\n        //\n        // There are also some legitimate redirects that\n        // currently cause errors that we're not handling,\n        // but they're fairly rare.\n        try {\n          worksResult = await olWorksApiCall(olid);\n        } catch {\n          continue;\n        }\n\n        newBooks.push({\n          authorNames: searchResult.author_name,\n          description: worksResult.description,\n          title: searchResult.title,\n          covers: worksResult.covers,\n          olid: olid\n        });\n      }\n\n      setBooks(newBooks);\n      setIsLoading(false);\n    });\n  }, [searchParams]);\n\n\n  return (\n    <div>\n      <TopBooks />\n      <div>\n        <h2>Search books</h2>\n        <SearchBox />\n        {/* If there's no query in the address bar (not even an empty\n        * one), that means no search has ever been entered, so display\n        * nothing. */}\n        {urlQuery === null\n          ? null\n          : (\n            isLoading\n              ? <div className=\"SearchPage-results-notice\">Loading search results...</div>\n              : (\n                books.length === 0\n                  ? <div className=\"SearchPage-results-notice\">No results for <q>{urlQuery}</q></div>\n                  : <BooksList books={books} />\n              )\n          )\n        }\n      </div></div>\n  );\n}\n\nexport default SearchPage;","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport SearchBox from 'components/SearchBox/SearchBox';\nimport BooksList from 'components/BooksList/BooksList';\n\nimport { olWorksApiCall, olAuthorsApiCall, keyToOlid, retrieveFavorites } from 'utils';\n\n// Note: despite the name, we use this component for the\n// front page as well as search (the front page is effectively\n// the same as the search page search page with nothing entered).\nfunction FavoritesPage() {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const [books, setBooks] = useState([]);\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  const favoriteOlids = retrieveFavorites();\n\n  function handleFavoriteChange({ olid, isFavorite }) {\n    // If a favorited book has been changed to no longer be\n    // the list of favorites (because the user removed a\n    // favorite while viewing this page), filter it out of the books\n    // we're displaying.\n    if (!isFavorite) {\n      const newBooks = books.filter((book) => book.olid !== olid);\n\n      setBooks(newBooks);\n    }\n  }\n\n  useEffect(async () => {\n    let newBooks = [];\n    for (let olid of favoriteOlids) {\n      const worksResult = await olWorksApiCall(olid);\n\n      // Look up authors for this book and add their names\n      // to the list of authors.\n      let authorNames = [];\n\n      for (let author of worksResult.authors) {\n        let authorResult = await olAuthorsApiCall(keyToOlid(author.author.key));\n        authorNames.push(authorResult.name);\n      }\n\n      newBooks.push({\n        authorNames: authorNames,\n        description: worksResult.description,\n        title: worksResult.title,\n        covers: worksResult.covers,\n        olid: olid\n      });\n\n    }\n    setIsLoading(false);\n    setBooks(newBooks);\n  }, []);\n\n\n  return (\n    <div>\n      <h2>Favorites</h2>\n      {/* If there's no query in the address bar (not even an empty\n        * one), that means no search has ever been entered, so display\n        * nothing. */}\n      {\n        isLoading\n          ? null\n          : (\n            books.length === 0\n              ? <em>No saved favorites</em>\n              : <BooksList books={books} onFavoriteChange={handleFavoriteChange} />\n          )\n      }\n    </div>\n  );\n}\n\nexport default FavoritesPage;","import { render } from \"react-dom\";\nimport {\n  Routes,\n  Route,\n  NavLink,\n  Navigate\n} from \"react-router-dom\";\n\nimport './App.css';\n\nimport SearchPage from 'components/SearchPage/SearchPage';\nimport FavoritesPage from 'components/FavoritesPage/FavoritesPage';\n\nfunction App() {\n  return (\n    <div className=\"App-container\">\n      <nav className=\"App-navbar\">\n        <h1>Library browser</h1>\n\n        <ul>\n          <li>\n            <NavLink to=\"search\" activeClassName=\"active\">\n              Search\n            </NavLink>\n          </li>\n          <li>\n            <NavLink to=\"favorites\" activeClassName=\"active\">\n              Favorites\n            </NavLink>\n          </li>\n        </ul>\n      </nav>\n      <Routes>\n        {/* Front page redirects to search page. */}\n        <Route path=\"/\" element={<Navigate replace to=\"/search\" />} />\n\n        <Route path=\"/search\" element={<SearchPage />} />\n        <Route path=\"/favorites\" element={<FavoritesPage />} />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}